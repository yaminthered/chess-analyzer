/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./app/__root";
import { Route as PageImport } from "./app/page";
import { Route as AnalyzerPageImport } from "./app/analyzer/page";
import { Route as PlayerUsernamePageImport } from "./app/player/$username/page";

// Create/Update Routes

const PageRoute = PageImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const AnalyzerPageRoute = AnalyzerPageImport.update({
  id: "/analyzer/",
  path: "/analyzer/",
  getParentRoute: () => rootRoute,
} as any);

const PlayerUsernamePageRoute = PlayerUsernamePageImport.update({
  id: "/player/$username/",
  path: "/player/$username/",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof PageImport;
      parentRoute: typeof rootRoute;
    };
    "/analyzer/": {
      id: "/analyzer/";
      path: "/analyzer";
      fullPath: "/analyzer";
      preLoaderRoute: typeof AnalyzerPageImport;
      parentRoute: typeof rootRoute;
    };
    "/player/$username/": {
      id: "/player/$username/";
      path: "/player/$username";
      fullPath: "/player/$username";
      preLoaderRoute: typeof PlayerUsernamePageImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof PageRoute;
  "/analyzer": typeof AnalyzerPageRoute;
  "/player/$username": typeof PlayerUsernamePageRoute;
}

export interface FileRoutesByTo {
  "/": typeof PageRoute;
  "/analyzer": typeof AnalyzerPageRoute;
  "/player/$username": typeof PlayerUsernamePageRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof PageRoute;
  "/analyzer/": typeof AnalyzerPageRoute;
  "/player/$username/": typeof PlayerUsernamePageRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/analyzer" | "/player/$username";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/analyzer" | "/player/$username";
  id: "__root__" | "/" | "/analyzer/" | "/player/$username/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  PageRoute: typeof PageRoute;
  AnalyzerPageRoute: typeof AnalyzerPageRoute;
  PlayerUsernamePageRoute: typeof PlayerUsernamePageRoute;
}

const rootRouteChildren: RootRouteChildren = {
  PageRoute: PageRoute,
  AnalyzerPageRoute: AnalyzerPageRoute,
  PlayerUsernamePageRoute: PlayerUsernamePageRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/analyzer/",
        "/player/$username/"
      ]
    },
    "/": {
      "filePath": "page.tsx"
    },
    "/analyzer/": {
      "filePath": "analyzer/page.tsx"
    },
    "/player/$username/": {
      "filePath": "player/$username/page.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
